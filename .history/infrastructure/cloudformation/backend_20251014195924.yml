AWSTemplateFormatVersion: '2010-09-09'
Description: 'Complete backend infrastructure - All Lambda functions and API Gateway endpoints'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
  
  ProjectName:
    Type: String
    Default: file-storage

Resources:
  # ============================================
  # IAM ROLE FOR LAMBDA FUNCTIONS
  # ============================================
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-lambda-role-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !Sub 'arn:aws:s3:::file-storage-${Environment}-${AWS::AccountId}/*'
                  - !Sub 'arn:aws:s3:::file-storage-${Environment}-${AWS::AccountId}'
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/files-${Environment}'
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/files-${Environment}/index/*'
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/SharedLinksTable-${Environment}'

  # ============================================
  # LAMBDA FUNCTIONS (5 total)
  # ============================================

  UploadFileLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-upload-file-${Environment}'
      Runtime: python3.9
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          from datetime import datetime
          
          s3 = boto3.client('s3')
          
          def handler(event, context):
              print("Upload file request received")
              print(f"Event: {json.dumps(event)}")
              
              return {
                  'statusCode': 200,
                  'headers': {
                      'Access-Control-Allow-Origin': '*',
                      'Access-Control-Allow-Headers': 'Content-Type',
                      'Access-Control-Allow-Methods': 'POST,OPTIONS'
                  },
                  'body': json.dumps({
                      'message': 'Upload endpoint ready - Josh will implement',
                      'uploadUrl': 'https://placeholder-presigned-url.com'
                  })
              }
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          BUCKET_NAME: !Sub 'file-storage-${Environment}-${AWS::AccountId}'
          TABLE_NAME: !Sub 'files-${Environment}'
      Timeout: 30
      MemorySize: 256

  ListFilesLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-list-files-${Environment}'
      Runtime: python3.9
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          
          dynamodb = boto3.resource('dynamodb')
          
          def handler(event, context):
              print("List files request received")
              print(f"Event: {json.dumps(event)}")
              
              return {
                  'statusCode': 200,
                  'headers': {
                      'Access-Control-Allow-Origin': '*',
                      'Access-Control-Allow-Headers': 'Content-Type',
                      'Access-Control-Allow-Methods': 'GET,OPTIONS'
                  },
                  'body': json.dumps({
                      'message': 'List endpoint ready - Josh will implement',
                      'files': []
                  })
              }
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          TABLE_NAME: !Sub 'files-${Environment}'
      Timeout: 30
      MemorySize: 256

  DownloadFileLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-download-file-${Environment}'
      Runtime: python3.9
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          
          s3 = boto3.client('s3')
          
          def handler(event, context):
              print("Download file request received")
              print(f"Event: {json.dumps(event)}")
              
              file_id = event.get('pathParameters', {}).get('fileId', 'unknown')
              
              return {
                  'statusCode': 200,
                  'headers': {
                      'Access-Control-Allow-Origin': '*',
                      'Access-Control-Allow-Headers': 'Content-Type',
                      'Access-Control-Allow-Methods': 'GET,OPTIONS'
                  },
                  'body': json.dumps({
                      'message': f'Download endpoint ready for file {file_id}',
                      'downloadUrl': 'https://placeholder-presigned-url.com'
                  })
              }
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          BUCKET_NAME: !Sub 'file-storage-${Environment}-${AWS::AccountId}'
          TABLE_NAME: !Sub 'files-${Environment}'
      Timeout: 30
      MemorySize: 256

  DeleteFileLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-delete-file-${Environment}'
      Runtime: python3.9
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          
          s3 = boto3.client('s3')
          dynamodb = boto3.resource('dynamodb')
          
          def handler(event, context):
              print("Delete file request received")
              print(f"Event: {json.dumps(event)}")
              
              file_id = event.get('pathParameters', {}).get('fileId', 'unknown')
              
              return {
                  'statusCode': 200,
                  'headers': {
                      'Access-Control-Allow-Origin': '*',
                      'Access-Control-Allow-Headers': 'Content-Type',
                      'Access-Control-Allow-Methods': 'DELETE,OPTIONS'
                  },
                  'body': json.dumps({
                      'message': f'Delete endpoint ready for file {file_id}'
                  })
              }
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          BUCKET_NAME: !Sub 'file-storage-${Environment}-${AWS::AccountId}'
          TABLE_NAME: !Sub 'files-${Environment}'
      Timeout: 30
      MemorySize: 256

  ShareFileLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-share-file-${Environment}'
      Runtime: python3.9
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          import uuid
          
          dynamodb = boto3.resource('dynamodb')
          
          def handler(event, context):
              print("Share file request received")
              print(f"Event: {json.dumps(event)}")
              
              file_id = event.get('pathParameters', {}).get('fileId', 'unknown')
              share_token = str(uuid.uuid4())
              
              return {
                  'statusCode': 200,
                  'headers': {
                      'Access-Control-Allow-Origin': '*',
                      'Access-Control-Allow-Headers': 'Content-Type',
                      'Access-Control-Allow-Methods': 'POST,OPTIONS'
                  },
                  'body': json.dumps({
                      'message': f'Share endpoint ready for file {file_id}',
                      'shareLink': f'https://placeholder.com/share/{share_token}'
                  })
              }
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          TABLE_NAME: !Sub 'files-${Environment}'
      Timeout: 30
      MemorySize: 256

  # ============================================
  # API GATEWAY
  # ============================================

  MyApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${ProjectName}-api-${Environment}'
      Description: File Storage API

  # ============================================
  # API GATEWAY RESOURCES
  # ============================================

  FilesResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref MyApiGateway
      ParentId: !GetAtt MyApiGateway.RootResourceId
      PathPart: files

  FileIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref MyApiGateway
      ParentId: !Ref FilesResource
      PathPart: '{fileId}'

  ShareResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref MyApiGateway
      ParentId: !Ref FileIdResource
      PathPart: share

  # ============================================
  # /files METHODS (GET and POST)
  # ============================================

  # POST /files (Upload)
  UploadFileMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref MyApiGateway
      ResourceId: !Ref FilesResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UploadFileLambda.Arn}/invocations'

  # GET /files (List)
  ListFilesMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref MyApiGateway
      ResourceId: !Ref FilesResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ListFilesLambda.Arn}/invocations'

  # OPTIONS /files (COMBINED - handles both GET and POST)
  FilesOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref MyApiGateway
      ResourceId: !Ref FilesResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # Lambda Permissions
  UploadFileLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref UploadFileLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MyApiGateway}/*/*'

  ListFilesLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ListFilesLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MyApiGateway}/*/*'

  # ============================================
  # /files/{fileId} METHODS
  # ============================================

  # GET /files/{fileId} (Download)
  DownloadFileMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref MyApiGateway
      ResourceId: !Ref FileIdResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DownloadFileLambda.Arn}/invocations'

  # DELETE /files/{fileId}
  DeleteFileMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref MyApiGateway
      ResourceId: !Ref FileIdResource
      HttpMethod: DELETE
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteFileLambda.Arn}/invocations'

  # OPTIONS /files/{fileId} (handles GET and DELETE)
  FileIdOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref MyApiGateway
      ResourceId: !Ref FileIdResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'GET,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # Lambda Permissions
  DownloadFileLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref DownloadFileLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MyApiGateway}/*/*'

  DeleteFileLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref DeleteFileLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MyApiGateway}/*/*'

  # ============================================
  # /files/{fileId}/share METHODS
  # ============================================

  # POST /files/{fileId}/share
  ShareFileMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref MyApiGateway
      ResourceId: !Ref ShareResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ShareFileLambda.Arn}/invocations'

  # OPTIONS /files/{fileId}/share
  ShareOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref MyApiGateway
      ResourceId: !Ref ShareResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # Lambda Permission
  ShareFileLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ShareFileLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MyApiGateway}/*/*'

  # ============================================
  # API DEPLOYMENT
  # ============================================

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - UploadFileMethod
      - ListFilesMethod
      - DownloadFileMethod
      - DeleteFileMethod
      - ShareFileMethod
      - FilesOptionsMethod
      - FileIdOptionsMethod
      - ShareOptionsMethod
    Properties:
      RestApiId: !Ref MyApiGateway

  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: !Ref Environment
      RestApiId: !Ref MyApiGateway
      DeploymentId: !Ref ApiGatewayDeployment
      Description: !Sub '${Environment} stage'

Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub 'https://${MyApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
    Export:
      Name: !Sub '${ProjectName}-api-url-${Environment}'

  ApiId:
    Description: API Gateway ID
    Value: !Ref MyApiGateway
    Export:
      Name: !Sub '${ProjectName}-api-id-${Environment}'

  LambdaRoleArn:
    Description: Lambda execution role ARN
    Value: !GetAtt LambdaExecutionRole.Arn
    Export:
      Name: !Sub '${ProjectName}-lambda-role-${Environment}'